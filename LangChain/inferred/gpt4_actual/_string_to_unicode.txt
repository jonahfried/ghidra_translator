Here's a detailed mapping of placeholder variable names to more descriptive, concise names in snake case, along with explanations for the reasoning behind each inferred name:

```json
{
  "param_1" : "input_string",
  "sVar1" : "required_size",
  "local_10" : "unicode_string"
}
```

### Explanation:

1. **`param_1`**: This variable is the parameter to the function `_string_to_unicode`, which clearly takes in a character string (`char *`) as input. Based on its usage, where it is treated as the source string for conversion, the name `input_string` is apt as it directly conveys that this is the input string to be converted.

2. **`sVar1`**: This variable is used to store the result from `_mbstowcs` when called with `NULL` and `0` as parameters, which typically is a method to calculate the required size of the destination buffer without performing the actual conversion. Thus, renaming it to `required_size` is fitting because it represents the size needed for the conversion output.

3. **`local_10`**: This variable is assigned the result of memory allocation (`_malloc`) and is later used as the destination buffer in `_mbstowcs` to hold the Unicode (wide character) version of the input string. The name `unicode_string` is descriptive of its role in holding the converted Unicode string.

These names improve the readability and maintainability of the code by giving meaningful context to what each variable represents and is used for.