Here's the mapping from placeholder variable names to descriptive, concise names, along with explanations for each:

```json
{
  "_string_count": "count_substrings",
  "param_1": "string_object_ptr",
  "param_2": "substring",
  "sVar1": "substring_length",
  "local_30": "current_position",
  "local_28": "substring_count",
  "local_10": "result_count"
}
```

### Explanation of Each Mapping:

1. **_string_count**: Renamed to `count_substrings` to better describe the function's purpose, which is to count occurrences of a substring within a string.

2. **param_1**: Renamed to `string_object_ptr` as it likely points to a string object. The function checks if it's null, indicating it's used as a pointer to a string or a structure encapsulating a string.

3. **param_2**: Renamed to `substring` because it is used in the function to find occurrences within the main string, which is a typical use-case for a substring.

4. **sVar1**: Renamed to `substring_length` as it stores the result of `_strlen(param_2)`, which calculates the length of the `substring`.

5. **local_30**: Renamed to `current_position` because it is initialized with the starting position of the string (pointed to by `*param_1`) and is then used to track the current position within the string as we search for occurrences of the `substring`.

6. **local_28**: Renamed to `substring_count` because it is used to count the occurrences of the `substring` within the main string. It's incremented each time an occurrence is found.

7. **local_10**: Renamed to `result_count` as it represents the final count of the substring occurrences, which is the return value of the function.

Each of these names is derived from the role that the variable plays within the function, and the renaming makes the function's logic clearer and easier to follow.