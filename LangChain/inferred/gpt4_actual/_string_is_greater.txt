In the provided function `_string_is_greater`, which takes two parameters and returns a boolean indicating whether the first string is greater than the second based on some comparison, we can infer better names and types for the parameters and variables based on their usage:

1. **param_1** and **param_2**:
   - These parameters are passed to another function `_string_compare`, which, by conventional naming and usage, suggests that they are strings. Since they are of type `undefined8`, in many contexts (especially decompiled code), this type indicates a pointer or a reference, likely pointing to a string or a char array.
   - Thus, renaming them to `string1` and `string2` respectively captures their purpose and the type more descriptively.
   - Type: `char*` or analogous string type, inferred from the context and typical usage in string comparisons.

2. **iVar1**:
   - This variable stores the result of `_string_compare`, which by typical naming conventions in programming and the operation performed on it (comparison to zero), is likely an integer.
   - The name `compare_result` would be more descriptive, indicating that this variable holds the outcome of a string comparison.
   - Type: `int`, based on the operation `0 < iVar1` which implies an integer comparison.

Thus, the mapping and inference for the variables and parameters in this function are as follows:
```json
{
  "param_1": "string1",
  "param_2": "string2",
  "iVar1": "compare_result"
}
```

The reasoning behind these names is based on typical programming conventions and the context provided by the function's name and operations. Each name is chosen to clearly reflect the role of the variable or parameter in the function's logic, improving code readability and maintainability.