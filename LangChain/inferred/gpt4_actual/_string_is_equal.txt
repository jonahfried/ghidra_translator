Based on the provided decompiled code and its structure, here are the inferred variable and parameter names along with their reasoning:

1. `param_1` and `param_2`: These are the parameters accepted by the function `_string_is_equal`. Given the context and the naming convention:
   - **Type:** Both parameters are of type `undefined8` which typically in decompiled code indicates a data type that is 64 bits wide. This often corresponds to pointers in a 64-bit system. Since the function name is `_string_is_equal` and it uses these parameters in a comparison function, these are likely to be pointers to strings.
   - **Inferred Name:** `string1` for `param_1` and `string2` for `param_2`. These names indicate that the parameters are strings and are being compared for equality.

2. `iVar1`:
   - **Type:** This is declared as an `int`. Based on its usage, where it holds the result of `_string_compare(param_1, param_2)`, it is likely used to store the comparison result.
   - **Inferred Name:** `compare_result`. This name is explanatory and indicates that this variable stores the result of the string comparison.

3. Function `_string_is_equal`:
   - **Type:** Returns a `bool`, clearly indicated by the function signature.
   - **Reasoning:** The function checks if two strings are equal by comparing them using another function `_string_compare`. The comparison result is checked against 0 (a typical pattern where 0 indicates equality in string comparison functions). If they are equal, the function returns `true`, otherwise `false`.

Here is the mapping in the requested format:

```json
{
  "param_1" : "string1",
  "param_2" : "string2",
  "iVar1" : "compare_result"
}
```

Each name is chosen to be descriptive and specific to the context provided by the function's operation, helping to increase code readability and maintainability.