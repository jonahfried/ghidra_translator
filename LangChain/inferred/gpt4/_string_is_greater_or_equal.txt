From the provided code snippet, it's possible to infer the purpose of each variable and parameter based on the function's operations and naming:

1. `param_1` and `param_2` are both passed to `_string_compare`, which is typically a function to compare two strings. This suggests that `param_1` and `param_2` represent strings. Since they are of type `undefined8`, this is likely an alias for a pointer type, commonly used in decompiled outputs for pointers (e.g., a 64-bit pointer on many systems). Hence, these should be string pointers. The descriptive names would be `string1` and `string2`.

2. `iVar1` is used to store the return value of `_string_compare`. The return value of string comparison functions generally indicates the lexicographical ordering of the strings: 0 if equal, a negative value if the first string is lexicographically smaller, and a positive value if it is larger. Therefore, `iVar1` represents the comparison result, and a suitable name would be `comparison_result`.

3. The function itself, `_string_is_greater_or_equal`, implies it returns a boolean value based on whether the first string (`string1`) is greater than or equal to the second string (`string2`). The comparison to `-1 < iVar1` checks if the result is not a negative value (which would mean `string1` is not less than `string2`, thus it is either equal or greater).

Here is the mapping in the desired format, interpreting the types and roles of the variables:

```json
{
  "param_1": "string1",
  "param_2": "string2",
  "iVar1": "comparison_result"
}
```

This mapping offers a clear, context-driven understanding of each component's role within the function.